curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar)
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, quartos)
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
plot_curva <- function(.curva, type = "predito", var = "cont") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
if(var == "cont") {
geom <- partial(geom_bar, stat = "identity", size = 1.2, alpha  = .7, fill = cor )
} else {
geom <- partial(geom_line, size = 1.2, alpha = 1.7, fill = cor)
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
plot_curva <- function(.curva, type = "predito", var = "continuous") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
if(var == "discrete") {
geom <- partial(geom_bar, stat = "identity", size = 1.2, alpha  = .7, fill = cor )
} else if (var == "continuous") {
geom <- partial(geom_line, size = 1.2, alpha = 1.7, fill = cor)
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar, var = "discrete") /
frame_marginal_effects(eval, area, var = "continuous")
frame_marginal_effects <- function(.data, var, vartype) {
eval %>%
curva({{var}}) %>%
plot_curva("dif", var = vartype) +
eval %>%
curva({{var}}) %>%
plot_curva(var = vartype)
}
frame_marginal_effects(eval, andar, var = "discrete") /
frame_marginal_effects(eval, area, var = "continuous")
plot_curva <- function(.curva, type = "predito", var = "continuous") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
if(var == "discrete") {
geom <- partial(geom_bar, stat = "identity", size = 1.2, alpha  = .7, fill = cor )
} else if (var == "continuous") {
geom <- partial(geom_line, size = 1.2, alpha = 1.7, fill = cor)
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var, vartype) {
eval %>%
curva({{var}}) %>%
plot_curva("dif", var = vartype) +
eval %>%
curva({{var}}) %>%
plot_curva(var = vartype)
}
frame_marginal_effects(eval, andar, var = "discrete") /
frame_marginal_effects(eval, area, var = "continuous")
plot_curva <- function(.curva, type = "predito", var = "continuous") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
if(var == "discrete") {
geom_agora <- partial(geom_bar, stat = "identity", size = 1.2, alpha  = .7, fill = cor )
} else if (var == "continuous") {
geom_agora <- partial(geom_line, size = 1.2, alpha = 1.7, fill = cor)
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_agora() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var, vartype) {
eval %>%
curva({{var}}) %>%
plot_curva("dif", var = vartype) +
eval %>%
curva({{var}}) %>%
plot_curva(var = vartype)
}
frame_marginal_effects(eval, andar, var = "discrete") /
frame_marginal_effects(eval, area, var = "continuous")
plot_curva <- function(.curva, type = "predito", var = "continuous") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
if(var == "discrete") {
geom_agora <- partial(geom_bar, stat = "identity", size = 1.2, alpha  = .7, fill = cor )
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_agora() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
) %>%
return()
} else if (var == "continuous") {
geom_agora <- partial(geom_line, size = 1.2, alpha = 1.7, fill = cor)
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_agora() +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
) %>%
return()
}
}
frame_marginal_effects <- function(.data, var, vartype) {
eval %>%
curva({{var}}) %>%
plot_curva("dif", var = vartype) +
eval %>%
curva({{var}}) %>%
plot_curva(var = vartype)
}
frame_marginal_effects(eval, andar, var = "discrete") /
frame_marginal_effects(eval, area, var = "continuous")
recover <- function(.data) {
.data %>%
mutate(area = exp(area),
quartos = exp(quartos))
}
## treinar os modelos ---------------------
(houses_mod <- readRDS("R/Dados/houses_clean.Rds") %>%
mutate(area = log(area),
quartos = log(quartos)))
houses_mod %>%
mutate(val = runif(n = nrow(.)) < .75) %>% {
treino <<- filter(., val) %>%
select(-val)
teste <<- filter(., !val) %>%
select(-val)
}
(expand_grid(
mtry = 3:8,
min_n = seq(20, 200, 20)) ->
grade_params)
(grade_params %>%
mutate(
melhor_modelo = mtry == 3 & min_n == 20,
modelos = map2(
.x = mtry,
.y = min_n,
~ randomForest(
formula = aluguel ~ .,
data = treino,
mtry = .x,
nodesize = .y,
ntree = 12*(ncol(houses_mod) - 2),
importance = TRUE,
keep.forest = TRUE))) ->
modelos)
## gerar a grade --------------------------
source("R/Scripts/thicken.R")
cidades <- c("Rio de Janeiro", "São Paulo", "Belo Horizonte", "Campinas", "Porto Alegre")
(apt_representativo <- tibble(
cidade = factor("Rio de Janeiro", levels = cidades),
area = log(92),
quartos = log(3),
banheiros = 2L,
vagas = 1L,
andar = 8,
mobiliado = 0,
aceita_animal = 1,
aluguel = NA_integer_))
(grade <- apt_representativo %>%
thicken(area, log(60), log(120)) %>%
thicken(andar, 0, 22, n = 24))
## avaliar --------------------------------
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
## plotar ---------------------------------
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_bar(stat = "identity", size = 1.2, alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
source("R/Scripts/thicken.R")
cidades <- c("Rio de Janeiro", "São Paulo", "Belo Horizonte", "Campinas", "Porto Alegre")
(apt_representativo <- tibble(
cidade = factor("Rio de Janeiro", levels = cidades),
area = log(92),
quartos = log(3),
banheiros = 2L,
vagas = 1L,
andar = 8,
mobiliado = 0,
aceita_animal = 1,
aluguel = NA_integer_))
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
## avaliar --------------------------------
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() %>%
mutate(area = floor(area)) ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
## plotar ---------------------------------
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = glue("Comportamento {ifelse(as_string(type) == 'predito', 'Variável Resposta', 'Efeitos Marginais')}"),
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
