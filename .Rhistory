erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4',
digits = 2) %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4',
digits = 2) %>%
write_lines(tabela2_4)
(tibble(x = runif(1000, -10, 10),
x2 = x^2,
y = 100 + 2*x - 5*x^2 + rnorm(length(x), sd = 20)) ->
data)
png("imagens/exemplo4_dist.png", width = 940, height = 678, res = 120)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 2, color = cor, alpha = .4) +
theme_minimal() +
labs(title = "y(x) = 100 + 5x - 2x^2 + resíduo",
subtitle = "Resíduo aleatórios tirados de uma N(0, 20)",
x = "X",
y = "Y")
dev.off()
(tibble(x = runif(1000, -10, 10),
x2 = x^2,
y = 100 + 2*x - 5*x^2 + rnorm(length(x), sd = 20)) ->
data)
png("imagens/exemplo4_dist.png", width = 940, height = 678, res = 120)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 2, color = cor, alpha = .4) +
theme_minimal() +
labs(title = "y(x) = 100 + 2x - 5x^2 + resíduo",
subtitle = "Resíduo aleatórios tirados de uma N(0, 20)",
x = "X",
y = "Y")
dev.off()
lm(y ~ x, data = data) -> modelo1
lm(y ~ x + x2, data = data) -> modelo2
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic) %>%
select(-p.value) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4',
digits = 2) %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic) %>%
select(-p.value) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4',
digits = 2) %>%
write_lines(tabela2_4)
library(tidyverse)
library(lubridate)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date))
)
)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date))
)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date'))
library(tidyverse)
library(randomForest)
N <- 10000
beta <- 2.5
(fake_data <- tibble(
X = rnorm(N = N, mean = 5, sd = .75),
Y = beta*X + rnorm(N, sd = .3)
))
(fake_data <- tibble(
X = rnorm(N = N, mean = 5, sd = .75),
Y = beta*X + rnorm(N = N, sd = .3)))
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = .75),
Y = beta*X + rnorm(n = N, sd = .3)))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação"
)
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = .75),
epsilon = rnorm(n = N, sd = .3),
Y = beta*X + epsilon))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação"
)
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = 2),
epsilon = rnorm(n = N),
Y = beta*X + epsilon))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação"
)
beta <- 1.5
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = 2),
epsilon = rnorm(n = N),
Y = beta*X + epsilon))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação"
)
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = 2),
epsilon = rnorm(n = N, sd = 3),
Y = beta*X + epsilon))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação"
)
(fake_data <- tibble(
X = rnorm(n = N, mean = 5, sd = 2),
epsilon = rnorm(n = N, sd = 3),
Y = 10 + beta*X + epsilon))
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação",
title = "Dados simulados",
subtitle = "Processo simulado: y_i = "
)
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação",
title = "Dados simulados",
subtitle = "Processo simulado: y_i = 10 + 1,5 * X + erro"
)
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação",
title = "Dados simulados",
subtitle = "Processo simulado: y_i = 10 + 1,5 * x_i + erro"
)
fake_data %>%
ggplot(aes(x = X, y = Y, color = epsilon)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
color = "Erro da Observação",
title = "Dados simulados",
subtitle = "Processo simulado: y_i = 10 + 1,5 * x_i + erro") +
legend(legend.position = 'none')
fake_data %>%
ggplot(aes(x = X, y = Y)) +
geom_point(size = 1.2, alpha = .5) +
theme_minimal() +
labs(
X = "Regressor",
Y = "Resposta",
title = "Dados simulados",
subtitle = "Processo simulado: y_i = 10 + 1,5 * x_i + erro")
library(wesanderson)
eval
source("R/Scripts/thicken.R")
modelo <- randomForest(formula = Y ~ X, nodesize = 30)
modelo <- randomForest(formula = Y ~ X, nodesize = 30, data = fake_data)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
plot_curva <- function(.curva, type = "predito", x_label = as_string(var)) {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = x_label,
y = glue("Comportamento {ifelse(as_string(type) == 'predito', 'Variável Resposta', 'Efeitos Marginais')}"),
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var, x_label) {
.data %>%
curva({{var}}) %>%
plot_curva("dif", x_label = x_label) +
.data %>%
curva({{var}}) %>%
plot_curva(x_label = x_label)
}
modelo <- randomForest(formula = Y ~ X, nodesize = 30, ntree = 100, data = fake_data)
tibble(X = seq(-1, 13, by = .05))
tibble(X = seq(-1, 13, by = .05)) %>%
mutate(predito = map(X,
~ tibble(X = .x) %>%
mutate(., predito = predict(modelo, newdata = .)))
)
tibble(X = seq(-1, 13, by = .05)) %>%
mutate(predito = map_dbl(X,
~ tibble(X = .x) %>%
mutate(., predito = predict(modelo, newdata = .)) %>%
pull(predito))
)
eval <- tibble(X = seq(-1, 13, by = .05)) %>%
mutate(predito = map_dbl(X,
~ tibble(X = .x) %>%
mutate(., predito = predict(modelo, newdata = .)) %>%
pull(predito)))
frame_marginal_effects <- function(.data, var, x_label = "") {
.data %>%
curva({{var}}) %>%
plot_curva("dif", x_label = x_label) +
.data %>%
curva({{var}}) %>%
plot_curva(x_label = x_label)
}
eval_verif <- tibble(X = seq(-1, 13, by = .05)) %>%
mutate(predito = map_dbl(X,
~ tibble(X = .x) %>%
mutate(., predito = predict(modelo, newdata = .)) %>%
pull(predito)))
frame_marginal_effects(eval_verif, X)
library(glue)
frame_marginal_effects(eval_verif, X)
library(rlang)
frame_marginal_effects(eval_verif, X)
.data
curva(eval_verif, X)
curva(eval_verif, X) %>% plot_curva()
curva(eval_verif, X) %>% plot_curva() %>% frame_marginal_effects()
curva(eval_verif, X) %>% plot_curva()
frame_marginal_effects <- function(.data, var, x_label = "") {
.data %>%
curva({{var}}) %>%
plot_curva("dif", x_label = x_label) +
.data %>%
curva({{var}}) %>%
plot_curva(x_label = x_label)
}
frame_marginal_effects <- function(.data, var, x_label = "") {
.data %>%
curva({{var}}) %>%
plot_curva(type = "dif", x_label = x_label) +
.data %>%
curva({{var}}) %>%
plot_curva(x_label = x_label)
}
frame_marginal_effects(eval_verif, X)
frame_marginal_effects(eval_verif, var = X)
eval_verif
library(patchwork)
frame_marginal_effects(eval_verif, X)
eval_verif
eval_verif %>%
mutate(verdadeiro = 10 + beta*X)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = X, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro")
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro")
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(0, 30) +
ylim(0, 30)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(5, 30) +
ylim(5, 30)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(5, 30) +
ylim(5, 30) +
theme_minimal()
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(10, 30) +
ylim(10, 30) +
theme_minimal()
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(10, 30) +
ylim(10, 30) +
theme_minimal() +
geom_smooth(method = 'lm')
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .5)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .05)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .1)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .2)
tibble(X = seq(-1, 13, by = .05))
tibble(X = seq(-1, 13, by = .01))
eval_verif <- tibble(X = seq(-1, 13, by = .01)) %>%
mutate(predito = map_dbl(X,
~ tibble(X = .x) %>%
mutate(., predito = predict(modelo, newdata = .)) %>%
pull(predito)))
frame_marginal_effects(eval_verif, X)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(10, 30) +
ylim(10, 30) +
theme_minimal() +
geom_smooth(method = 'lm')
eval_verif %>%
+   mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
+   ggplot(aes(x = residuo)) +
+   geom_histogram(binwidth = .2)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .2)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .1)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .4)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .5)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X, residuo = verdadeiro - predito) %>%
ggplot(aes(x = residuo)) +
geom_histogram(binwidth = .4)
eval_verif %>%
mutate(verdadeiro = 10 + beta*X) %>%
ggplot(aes(x = predito, y = verdadeiro)) +
geom_point() +
labs(
X = "Predito",
Y = "Valor verdadeiro",
title = "Comparação de predições do modelo com valores corretos") +
xlim(10, 30) +
ylim(10, 30) +
theme_minimal() +
geom_smooth(method = 'lm')
eval_verif
eval_verif %$%
max(predito) - min(predito) / (max(X) - min(X))
library(magrittr)
library(magrittr)
eval_verif %$%
max(predito) - min(predito) / (max(X) - min(X))
eval_verif
eval_verif %$%
max(predito) - min(predito) / (max(X) - min(X))
eval_verif %$%
max(predito) - min(predito) / (max(X) - min(X))
eval_verif %$%
(max(predito) - min(predito)) / (max(X) - min(X))
get_beta <- function(.data, X, pred) {
.data %$%
(max({{pred}}) - min({{pred}})) / (max({{X}}) - min{{X}})
}
get_beta <- function(.data, X, pred) {
.data %$%
(max({{pred}}) - min({{pred}})) / (max({{X}}) - min{{X}})
}
get_beta <- function(.data, X, pred) {
.data %$%
(max({{pred}}) - min({{pred}})) / (max({{X}}) - min{{X}})
}
get_beta <- function(.data, X, pred) {
.data %$%
(max({{pred}}) - min({{pred}})) / (max({{X}}) - min{{X}})
}
lm(pred ~ X, data = eval_verif)
lm(predito ~ X, data = eval_verif)
lm(predito ~ X, data = eval_verif) %>%
stargazer()
library(stargazer)
lm(predito ~ X, data = eval_verif) %>%
stargazer()
lm(predito ~ X, data = eval_verif) %>%
stargazer(out = 'tabelas/verif_lab.tex')
