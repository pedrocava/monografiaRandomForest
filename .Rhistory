trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- worflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
library(workflows)
ciclo <- worflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
ciclo
receita_dados <- recipe(classificacao_acidente ~ .,
data = treino) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_predictors()) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa)
prep_rec <- prep(receita_dados)
prep_rec
receita_dados
receita_dados <- recipe(classificacao_acidente ~ .,
data = treino) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_predictors(), -all_outcomes()) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa)
prep_rec <- prep(receita_dados)
receita_dados <- recipe(classificacao_acidente ~ .,
data = treino) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa)
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
ciclo
install.packages("doParallel")
doParallel::registerDoParallel()
tune_res <- tune_grid(
modelo_spec,
resamples = dados_cv,
grid = 50
)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal")) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ .,
data = treino) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa)
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
doParallel::registerDoParallel()
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal")) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ .,
step_date(data_inversa, features = c("dow", "month")) %>%
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal")) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ .,) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
recipe(classificacao_acidente ~ .,)
receita_dados <- recipe(classificacao_acidente ~ .,data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
doParallel::registerDoParallel()
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
dados_cv <<- vfold_cv(treino)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 20
)
dados_cv
dados_cv$splits
dados_cv$splits[[1]]
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal")) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ .,data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes())
treino
recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes())
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
dados
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
dados
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal"),
br = paste0("BR-", br)) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_normalize(all_numeric())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes())# %>%  step_normalize(all_numeric())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal(), -all_outcomes())#
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_date(data_inversa, features = c("dow", "month")) %>%
step_rm(data_inversa) %>%
step_dummy(all_nominal(), -all_outcomes())#
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
doParallel::registerDoParallel()
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_adicente = if_else(classificacao_acidente == "Com Vítimas Fatais",
true = "Fatal",
false = "Não-Fatal"),
br = paste0("BR-", br)) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional, -data_inversa) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_dummy(all_nominal(), -all_outcomes())#
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec)
doParallel::registerDoParallel()
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
tune_res
tune_res %>%
collect_metrics()
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mtry, min_n, mean) %>%
pivot_longer(min_n:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")
dados
dados %$% table(classificacao_acidente)
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_acidente = if_else(classificacao_acidente == "Com Vítimas Fatais",
"Fatal",
"Não-Fatal"),
br = paste0("BR-", br)) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop,
-dia_semana, -latitude, -longitude, -regional, -data_inversa) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
dados %$% table(classificacao_acidente)
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_dummy(all_nominal(), -all_outcomes())#
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
modelo_spec_logit <- logistic_reg("classification") %>%
set_engine("glm")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand) %>%
add_model(modelo_spec_logit)
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand, modelo_spec_logit)
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = 50
)
grade_params <- expand_grid(mtry = 10:30,
min_n = 2:10)
grade_params
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = grade_params
)
tune_res
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mtry, min_n, mean) %>%
pivot_longer(min_n:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~ parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mtry, min_n, mean) %>%
pivot_longer(min_n:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~ parameter, scales = "free_x") +
labs(x = NULL, y = "AUC") +
ylim(.7, 1)
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mtry, min_n, mean) %>%
pivot_longer(min_n:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~ parameter, scales = "free_x") +
labs(x = NULL, y = "AUC") +
ylim(.85, .9)
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mtry, min_n, mean) %>%
pivot_longer(min_n:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~ parameter, scales = "free_x") +
labs(x = NULL, y = "AUC") +
ylim(.85, .9) +
xlim(5, 30)
grade_params <- expand_grid(mtry = 8:40,
min_n = 4:10)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = grade_params
)
grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = grade_params
)
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
mutate(min_n = factor(min_n)) %>%
ggplot(aes(mtry, mean, color = min_n)) +
geom_line(alpha = 0.5, size = 1.5) +
geom_point() +
labs(y = "AUC")
best_auc <- select_best(regular_res, "roc_auc")
best_auc <- select_best(tune_res, "roc_auc")
best_auc
final_rf <- finalize_model(
modelo_spec_rand,
best_auc
)
final_rf
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(classificacao_acidente ~ .,
data = juice(prep_rec)
) %>%
vip(geom = "point")
install.packages("vip")
library(vip)
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(classificacao_acidente ~ .,
data = juice(prep_rec)
) %>%
vip(geom = "point")
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_acidente = if_else(classificacao_acidente == "Com Vítimas Fatais",
"Fatal",
"Não-Fatal"),
br = paste0("BR-", br)) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop, -feridos,
-dia_semana, -latitude, -longitude, -regional, -data_inversa) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
dados <- readRDS("R/Dados/acidentes.Rds") %>%
mutate(classificacao_acidente = if_else(classificacao_acidente == "Com Vítimas Fatais",
"Fatal",
"Não-Fatal"),
br = paste0("BR-", br)) %>%
select(-pessoas, -mortos, -feridos_leves, -id, -delegacia,
-municipio, -feridos_graves, -ilesos, -ignorados, -uop, -feridos,
-tipo_acidente,-dia_semana, -latitude, -longitude, -regional, -data_inversa) %T>% {
dados_split <<- initial_split(., .8)
treino <<- training(dados_split)
teste <<- testing(dados_split)
dados_cv <<- vfold_cv(treino)
}
receita_dados <- recipe(classificacao_acidente ~ ., data = treino) %>%
step_dummy(all_nominal(), -all_outcomes())
prep_rec <- prep(receita_dados)
(juiced_rec <- juice(prep_rec))
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("classification") %>%
set_engine("ranger")
modelo_spec_logit <- logistic_reg("classification") %>%
set_engine("glm")
ciclo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10)
tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = grade_params
)
