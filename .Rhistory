mobiliado = 0,
aceita_animal = 1,
aluguel = NA_integer_))
(grade <- apt_representativo %>%
thicken(area, log(60), log(120)) %>%
thicken(andar, 0, 22, n = 24))
## avaliar --------------------------------
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
## plotar ---------------------------------
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_bar(stat = "identity", size = 1.2, alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
source("R/Scripts/thicken.R")
cidades <- c("Rio de Janeiro", "São Paulo", "Belo Horizonte", "Campinas", "Porto Alegre")
(apt_representativo <- tibble(
cidade = factor("Rio de Janeiro", levels = cidades),
area = log(92),
quartos = log(3),
banheiros = 2L,
vagas = 1L,
andar = 8,
mobiliado = 0,
aceita_animal = 1,
aluguel = NA_integer_))
(grade <- apt_representativo %>%
thicken(area, log(60), log(120), n = 120) %>%
thicken(andar, 0, 22, n = 24))
## avaliar --------------------------------
(modelos %>%
mutate(
id_modelo = as.character(1:nrow(.)),
a_tirar = map(
modelos,
~ predict(.x, newdata = grade) %>%
tibble(predito = .) %>%
bind_cols(grade))) %>%
unnest(a_tirar) %>%
recover() %>%
mutate(area = floor(area)) ->
eval)
curva <- function(.data, var) {
.data %>%
arrange({{var}}) %>%
group_by({{var}}) %>%
summarise(
predito = mean(predito),
.groups = "drop") %>%
mutate(dif = predito - lag(predito, n = 1)) %>%
slice(2:nrow(.))
}
## plotar ---------------------------------
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = "Resposta",
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
plot_curva <- function(.curva, type = "predito") {
var <- .curva %>%
names() %>%
discard(~ .x %in% c("predito", "dif")) %>%
sym()
if(type == "predito") {
type <- sym(type)
} else if (type == "dif") {
type <- sym("dif")
}
.curva %>%
ggplot(aes(x = {{var}}, y = {{type}})) +
geom_col(alpha  = .7, fill = cor) +
theme_minimal() +
labs(
x = glue("{as_string(var)}"),
y = glue("Comportamento {ifelse(as_string(type) == 'predito', 'Variável Resposta', 'Efeitos Marginais')}"),
title = glue("Comportamento {ifelse(as_string(type) == 'predito', 'da Predição Média', 'dos Efeitos Marginais')}")
)
}
frame_marginal_effects <- function(.data, var) {
eval %>%
curva({{var}}) %>%
plot_curva("dif") +
eval %>%
curva({{var}}) %>%
plot_curva()
}
frame_marginal_effects(eval, andar) /
frame_marginal_effects(eval, area)
install.packages('tidymodels')
library(tidyverse)
library(magrittr)
library(wesanderson)
library(stargazer)
library(broom)
pal <- wes_palette("Cavalcanti1")
cor <- wes_palette("Cavalcanti1") %>%
pluck(1)
(tibble(x = runif(1000, -10, 10),
x2 = x^2,
y = 100 + 5*x - 2*x^2 + rnorm(length(x), sd = 20)) ->
data)
png("imagens/exemplo3_dist.png", width = 940, height = 678, res = 120)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 2, color = cor, alpha = .4) +
theme_minimal() +
labs(title = "y(x) = 100 + 5x - 2x^2 + resíduo",
subtitle = "Resíduo aleatórios tirados de uma N(0, 20)",
x = "X",
y = "Y")
dev.off()
lm(y ~ x, data = data) -> modelo1
lm(y ~ x + x2, data = data) -> modelo2
brrom(modelo1, modelo2)
tidy(modelo1, modelo2)
tidy(modelo1)
tidy(modelo1) %>%
mutate(modelo = 1)
tidy(modelo1) %>%
mutate(modelo = 1) %>%
bind_rows(tidy(modelo2))
tidy(modelo1) %>%
mutate(modelo = 1) %>%
bind_rows(tidy(modelo2)) %>%
mutate(modelo = ifelse(is.na(modelo), 2, modelo))
tidy(modelo1) %>%
mutate(modelo = 1) %>%
bind_rows(tidy(modelo2)) %>%
mutate(modelo = ifelse(is.na(modelo), 2, modelo)) %>%
pivot_wider(modelo)
tidy(modelo1) %>%
mutate(modelo = 1) %>%
bind_rows(tidy(modelo2)) %>%
mutate(modelo = ifelse(is.na(modelo), 2, modelo))
library(knitr)
tidy(modelo1) %>%
mutate(modelo = 1) %>%
kable(format = latex'')
tidy(modelo1) %>%
mutate(modelo = 1) %>%
kable(format = 'latex')
tidy(modelo2) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4')
tabela1_4 <- file('tabela1_exemplo4.tex')
tidy(modelo1) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4') %>%
write_lines(tabela1_4)
close(tabela1_4)
tabela1_4 <- file('tabela1_exemplo4.tex')
tidy(modelo1) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4') %>%
write_lines(tabela1_4)
close(tabela1_4)
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4') %>%
write_lines(tabela1_4)
close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4') %>%
write_lines(tabela2_4)
tinytex::install_tinytex()
tidy(modelo2)
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4') %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4') %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
write_lines(tabela2_4)
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4') %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4') %>%
write_lines(tabela2_4)
tidy(modelo1) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value)
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4',
digits = 2) %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic,
p_valor = p.value) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4',
digits = 2) %>%
write_lines(tabela2_4)
(tibble(x = runif(1000, -10, 10),
x2 = x^2,
y = 100 + 2*x - 5*x^2 + rnorm(length(x), sd = 20)) ->
data)
png("imagens/exemplo4_dist.png", width = 940, height = 678, res = 120)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 2, color = cor, alpha = .4) +
theme_minimal() +
labs(title = "y(x) = 100 + 5x - 2x^2 + resíduo",
subtitle = "Resíduo aleatórios tirados de uma N(0, 20)",
x = "X",
y = "Y")
dev.off()
(tibble(x = runif(1000, -10, 10),
x2 = x^2,
y = 100 + 2*x - 5*x^2 + rnorm(length(x), sd = 20)) ->
data)
png("imagens/exemplo4_dist.png", width = 940, height = 678, res = 120)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point(size = 2, color = cor, alpha = .4) +
theme_minimal() +
labs(title = "y(x) = 100 + 2x - 5x^2 + resíduo",
subtitle = "Resíduo aleatórios tirados de uma N(0, 20)",
x = "X",
y = "Y")
dev.off()
lm(y ~ x, data = data) -> modelo1
lm(y ~ x + x2, data = data) -> modelo2
tabela1_4 <- file('tabelas/tabela1_exemplo4.tex')
tidy(modelo1) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic) %>%
select(-p.value) %>%
kable(format = 'latex',
caption = 'Modelo sem termo quadrático',
label = 'tabela1_exemplo4',
digits = 2) %>%
write_lines(tabela1_4)
# close(tabela1_4)
tabela2_4 <- file('tabelas/tabela2_exemplo4.tex')
tidy(modelo2) %>%
rename(
termo = term,
estimativa = estimate,
erro_padrao = std.error,
estatistica_t = statistic) %>%
select(-p.value) %>%
kable(format = 'latex',
caption = 'Modelo com termo quadrático',
label = 'tabela2_exemplo4',
digits = 2) %>%
write_lines(tabela2_4)
library(tidyverse)
library(lubridate)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date))
)
)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date))
)
tibble(date = as_date(c("2020-10-31", "2020-11-09"))) %>%
mutate(tag = ifelse(date == as_date("2020-10-31"), 'Date1', 'other date'))
