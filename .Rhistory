vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
animal = if_else(aceita_animal == "acept", 1, 0),
mobiliado = if_else(mobiliado == "furnished", 1, 0)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas") %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
(houses <- import("R/Dados/houses.csv",
setclass = "tibble",
encoding = "UTF-8") %>%
rename(
cidade = city,
quartos = rooms,
banheiros = bathroom,
vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
aceita_animal = if_else(animal == "acept", 1, 0),
animal = NULL,
mobiliado = if_else(mobiliado == "furnished", 1, 0)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas") %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
(houses <- readRDS("R/Dados/houses_clean.Rds"))
arvore <- rpart(aluguel ~ .,
data = houses)
rpart.plot(arvore) %>%
save.image()
rpart.plot(arvore)
(houses <- import("R/Dados/houses.csv",
setclass = "tibble",
encoding = "UTF-8") %>%
rename(
cidade = city,
quartos = rooms,
banheiros = bathroom,
vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
aceita_animal = if_else(animal == "acept", 1, 0),
animal = NULL,
andar = ifelse(andar == "-", 0, as.numeric(andar)),
mobiliado = if_else(mobiliado == "furnished", 1, 0)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas") %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
recipe(
aluguel ~ .,
data = treino)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
houses_split <- initial_split(houses, .8)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
recipe(
aluguel ~ .,
data = treino)
houses
treino
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes()) %>%
step_scale(area, andar, -all_outcomes()) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
prep_rec
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes()) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
prep_rec
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger")
modelo_spec_rand
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
modelo_lin_reg
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
fluxo
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand) %>%
add_model(modelo_lin_reg)
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand, modelo_lin_reg)
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
(grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10))
dados_cv
(tune_res <- tune_grid(
ciclo,
resamples = dados_cv,
grid = grade_params
))
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
install.packages("ranger")
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
(houses <- import("R/Dados/houses.csv",
setclass = "tibble",
encoding = "UTF-8") %>%
rename(
cidade = city,
quartos = rooms,
banheiros = bathroom,
vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
aceita_animal = if_else(animal == "acept", 1, 0),
animal = NULL,
andar = ifelse(andar == "-", 0, as.numeric(andar)),
mobiliado = if_else(mobiliado == "furnished", 1, 0),
cidade = factor(cidade)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas") %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
(houses <- readRDS("R/Dados/houses_clean.Rds"))
arvore <- rpart(aluguel ~ .,
data = houses)
rpart.plot(arvore)
houses_split <- initial_split(houses, .8)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes()) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger")
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
(grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10))
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
recipe(
aluguel ~ .,
data = treino)
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes())
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade)
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes()) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
prep_rec
houses_split <- initial_split(houses, .8)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_dummy(cidade, -all_outcomes()) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger")
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
(grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10))
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
houses_split <- initial_split(houses, .8)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger")
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
(grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10))
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
houses
drop_na(houses)
tune_res
View(dados_cv)
library(tidymodels)
library(randomForest)
library(magrittr)
library(rpart)
library("rpart.plot")
(houses <- readRDS("R/Dados/houses_clean.Rds"))
arvore <- rpart(aluguel ~ .,
data = houses)
rpart.plot(arvore)
## Tidymodels ------------------------------
houses_split <- initial_split(houses, .8)
treino <- training(houses_split)
teste <- testing(houses_split)
dados_cv <- vfold_cv(treino)
receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_normalize(area, andar, -all_outcomes())
prep_rec <- prep(receita_dados)
modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_mode("regression") %>%
set_engine("ranger")
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand)
doParallel::registerDoParallel()
(grade_params <- expand_grid(mtry = 8:15,
min_n = 4:10))
tune_res %>%
collect_metrics()
mase(tunes_res)
mase(tune_res)
metrics(tune_res, truth)
metrics(tune_res, truth, estimate)
tune_res
collect_metrics
tune_res %>%
collect_metrics()
(grade_params <- expand_grid(mtry = seq(5, 30, 3),
min_n = seq(4, 20, 2)))
(grade_params <- expand_grid(mtry = seq(5, 30, 3),
min_n = seq(4, 20, 2)))
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params
))
jucie(prep_rec)
juice(prep_rec)
houses %>%
ggplot(aes(x = area, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal) %T>%
gsave(filename = "hist_area")
houses %>%
ggplot(aes(x = area, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
normalize
houses %>%
ggplot(aes(x = map_dbl(area, function(v) (v - mean(v)) / sd(v)), fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
houses %>%
ggplot(aes(x = map_dbl(area, function(.x) (.x - mean(.x)) / sd(.x)), fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
houses %>%
ggplot(aes(x = area, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
normalize <- function(v) (v - mean(v)) / sd(v)
houses %>%
ggplot(aes(x = normalize(area), fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
houses %>%
ggplot(aes(x = log(area), fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos apartamentos por área e cidade",
x = "Área (M^2)",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
houses %>%
ggplot(aes(x = andar, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos andares por cidade",
x = "Andar",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
(houses <- import("R/Dados/houses.csv",
setclass = "tibble",
encoding = "UTF-8") %>%
rename(
cidade = city,
quartos = rooms,
banheiros = bathroom,
vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
aceita_animal = if_else(animal == "acept", 1, 0),
animal = NULL,
andar = ifelse(andar == "-", 0, as.numeric(andar)),
mobiliado = if_else(mobiliado == "furnished", 1, 0),
cidade = factor(cidade)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas", andar < 40) %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
houses %>%
ggplot(aes(x = andar, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos andares por cidade",
x = "Andar",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
library(tidyverse)
library(rio)
library(logger)
library(magrittr)
library(wesanderson)
library(glue)
(houses <- import("R/Dados/houses.csv",
setclass = "tibble",
encoding = "UTF-8") %>%
rename(
cidade = city,
quartos = rooms,
banheiros = bathroom,
vagas = `parking spaces`,
andar = floor,
mobiliado = furniture,
condominio = `hoa (R$)`,
aluguel = `rent amount (R$)`,
iptu = `property tax (R$)`,
seguro_incendio = `fire insurance (R$)`,
total = `total (R$)`
) %>%
mutate(
aceita_animal = if_else(animal == "acept", 1, 0),
animal = NULL,
andar = ifelse(andar == "-", 0, as.numeric(andar)),
mobiliado = if_else(mobiliado == "furnished", 1, 0),
cidade = factor(cidade)) %T>%
saveRDS("R/Dados/houses_full.Rds") %T>%
write_csv("R/Dados/houses_full.csv") %>%
filter(area < 500, aluguel < 10000, cidade != "Campinas", andar < 40) %>%
select(-iptu, -seguro_incendio, -total, -condominio) %T>%
saveRDS("R/Dados/houses_clean.Rds") %T>%
write_csv("R/Dados/houses_clean.csv")
)
houses %>%
ggplot(aes(x = andar, fill = cidade)) +
geom_histogram(aes(y = ..density..)) +
theme_minimal() +
labs(title = "Distribuição dos andares por cidade",
x = "Andar",
y = "Densidade",
fill = "Cidade") +
scale_fill_manual(values = pal)
