unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A)
thicken <- function(
.dat,
var,
min = NULL,
max = NULL,
n = 50) {
var <- ensym(var)
if(is.null(min)) {
v <- pull(.dat, var)
min <- mean(v, na.rm = TRUE) - 2*sd(v, na.rm = TRUE)
print(min)
}
if(is.null(min)) {
v <- pull(.dat, var)
max <- mean(v, na.rm = TRUE) + 2*sd(v, na.rm = TRUE)
print(max)
}
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
.data
pull(.data, sym("A"))
thicken <- function(
.dat,
var,
min = NULL,
max = NULL,
n = 50) {
var <- ensym(var)
if(is.null(min)) {
v <- pull(.dat, as_string(var))
min <- mean(v, na.rm = TRUE) - 2*sd(v, na.rm = TRUE)
print(min)
}
if(is.null(min)) {
v <- pull(.dat, as_string(var))
max <- mean(v, na.rm = TRUE) + 2*sd(v, na.rm = TRUE)
print(max)
}
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
library(rlang)
thicken <- function(
.dat,
var,
min = NULL,
max = NULL,
n = 50) {
var <- ensym(var)
if(is.null(min)) {
v <- pull(.dat, as_string(var))
min <- mean(v, na.rm = TRUE) - 2*sd(v, na.rm = TRUE)
print(min)
}
if(is.null(min)) {
v <- pull(.dat, as_string(var))
max <- mean(v, na.rm = TRUE) + 2*sd(v, na.rm = TRUE)
print(max)
}
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min = NULL,
max = NULL,
n = 50) {
var <- ensym(var)
if(is.null(min)) {
v <- pull(.dat, as_string(var))
print(v)
min <- mean(v, na.rm = TRUE) - 2*sd(v, na.rm = TRUE)
print(min)
}
if(is.null(min)) {
v <- pull(.dat, as_string(var))
max <- mean(v, na.rm = TRUE) + 2*sd(v, na.rm = TRUE)
print(max)
}
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min = NULL,
max = NULL,
n = 50) {
var <- ensym(var)
if(is.null(min)) {
min <- pull(.dat, var) - 1
}
if(is.null(min)) {
max <- pull(.dat, as_string(var)) + 1
}
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min,
max,
n = 50) {
var <- ensym(var)
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A) %>%
thicken(C, -3, 12)
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min,
max,
n = 50) {
var <- ensym(var)
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-var) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
library(tidyverse)
library(rlang)
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min,
max,
n = 50) {
var <- ensym(var)
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-any_of(var)) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
thicken <- function(
.dat,
var,
min,
max,
n = 20) {
var <- ensym(var)
valores_unicos <- .dat %>%
pull(var) %>%
unique() %>%
length()
if(valores_unicos != 1) rlang::abort("Values in selected column must be unique")
if(.dat %>% pull(var) %>% length() > 1) {
original <- .dat
aditivo <- tibble({{var}} :=  seq(min, max, length.out = n - 1))
original %>%
select(-any_of(var)) %>%
mutate({{var}} := rep(aditivo, times = nrow(.))) %>%
unnest({{var}}) %>%
return()
} else {
(.dat %>%
select(- var) ->
original)
tibble({{var}} :=  seq(min, max, length.out = n - 1)) %>%
cbind(original) %>%
as_tibble() %>%
bind_rows(.dat) %>%
return()
}
}
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4)
tibble(
A = 1,
B = 5,
C = 7) %>%
thicken(A, 0, 4) %>%
thicken(C, -3, 12)
tune_res
library(tidymodels)
library(tidyverse)
library(randomForest)
library(magrittr)
library(rpart)
library("rpart.plot")
set.seed(1234)
(houses <- readRDS("R/Dados/houses_clean.Rds"))
pal <- wes_palette("BottleRocket1", n = 6)
cor <- wes_palette("BottleRocket1", n = 6) %>%
pluck(1)
## Tidymodels ------------------------------
(houses_split <- initial_split(houses, .8))
treino <- training(houses_split)
teste <- testing(houses_split)
(dados_cv <- vfold_cv(treino))
(receita_dados <-
recipe(
aluguel ~ .,
data = treino) %>%
step_log(area, andar, quartos))
(prep_rec <- prep(receita_dados))
(modelo_spec_rand <- rand_forest(
mtry = tune(),
min_n = tune(),
trees = 300) %>%
set_mode("regression") %>%
set_engine("ranger"))
modelo_lin_reg <- linear_reg() %>%
set_engine("lm")
(fluxo <- workflow() %>%
add_recipe(prep_rec) %>%
add_model(modelo_spec_rand))
doParallel::registerDoParallel()
(expand_grid(
mtry = 3:8,
min_n = seq(20, 200, 20)) ->
grade_params)
medidas <- metric_set(
rpiq,
ccc,
mae,
mpe,
rsq,
rmse
)
(tune_res <- tune_grid(
object = fluxo,
resamples = dados_cv,
grid = grade_params,
metrics = medidas,
control = control_grid(save_pred = TRUE)) %T>%
saveRDS("R/Dados/modelo_reg_houses.Rds"))
(collect_metrics(
tune_res) %T>%
saveRDS("R/Dados/metricas_reg_houses.Rds") ->
metricas)
(collect_predictions(tune_res) %T>%
saveRDS("R/Dados/predicoes_reg_houses.Rds") ->
predicoes)
lm(aluguel ~ log(area) + log(quartos) + log(andar + 1) + mobiliado + banheiros,
data = houses) ->
modelo
modelo %>%
summary()
tune_res %>% unnest(.metrics)
select_best(tune_res)
c(
"rpiq",
"ccc",
"mae",
"mpe",
"rsq",
"rmse") %>%
map_dfr(~ select_best(tune_res, metric = .x))
c(
"rpiq",
"ccc",
"mae",
"mpe",
"rsq",
"rmse") %>%
map_dfr(~ select_best(tune_res, metric = .x) %>%
mutate(metrica = .x) %>%
select(-.config))
